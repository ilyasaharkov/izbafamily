import { reactive } from "vue";
import { callBack } from "../../models/Forms/";
import { api } from "@/api";

const callBackFormViewObject = reactive(callBack);
let data = reactive({})
const fetchLoad = reactive({
    loading: false,
    success: false
})

let type_form = {
    request: '–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ',
    middle: '–ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?',
    footer: '–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?',
}

const sendDataForm = async ($type) => {
    if (fetchLoad.loading) return

    fetchLoad.loading = true

    if(!checkValidForm()) return
    const type = type_form[$type]
    data = callBackFormViewObject.fields.reduce((acc, item) => {
        acc[item.key] = item.answer;
        acc.created_date = new Date()
        acc.created_date = convertToISODate(acc.created_date)
        acc.update_date = ''
        acc.client = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        acc.status = '–ù—É–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å'
        return acc;
    }, {});
    data.type = type
    callBackFormViewObject.status = true
    const result = getFormatTextForTelegram()
    try {
        api.tgBotSender('lead', result)
            .then(() => {
                clearAllFields()
            })
            .catch(error => {
                console.log('error', error)
                api.tgBotSender('report', '[–û—à–∏–±–∫–∞]: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É.')
                    .then()
                    .catch()
            })
        const response = await fetch("https://pipakalot.beget.app/api/leads/create", {
            method: "POST",
            credentials: 'include',
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data),
        });

        if (response.ok) {
            clearAllFields()
            fetchLoad.loading = false
            fetchLoad.success = true
        } else {
            fetchLoad.loading = false
            return console.log('[–û—à–∏–±–∫–∞]: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')
        }
    } catch (error) {
        fetchLoad.loading = false
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", error);
    }


}

const formatPhoneNumber = (phoneNumber) => {
    // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
    const formattedNumber = phoneNumber.replace(/\D/g, '');

    // –î–æ–±–∞–≤–∏—Ç—å "+7" –∫ –Ω–∞—á–∞–ª—É –Ω–æ–º–µ—Ä–∞
    const finalNumber = "+" + formattedNumber;

    return finalNumber;
}

const getFormatTextForTelegram = () => {
    const formatNumber = formatPhoneNumber(data.phone)
    return (`-------------------------------------\n\n‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n‚ùì –¢–∏–ø —Ñ–æ—Ä–º—ã: ${data.type}\n\nüë®‚Äçüíº –ò–º—è: ${data.name}\n\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n ${formatNumber}\n\n üèô –ì–æ—Ä–æ–¥: ${data.city}\n\n-------------------------------------`).replace(/(\[[^\][]*]\(https[^()]*\))|[_*[\]()~>#+=|{}.!-]/gi, (x, y) => y || '\\' + x)
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
const checkValidForm = () => {
    callBackFormViewObject.fields.forEach((item) => {
        if (item.code === 'phone') {
            if (item.answer.length === 18) {
                item.error.status = false
            } else {
                item.error.status = true
            }
        } else {
            item.answer ? item.error.status = false : item.error.status = true
        }
    })
    return callBackFormViewObject.fields.every(item => item.error.status === false);
}

const clearAllFields = () => {
    callBackFormViewObject.fields.forEach((item) => {
        item.answer = ''
    })
}

const convertToISODate = (inputDate) => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞—Ç–æ–π –≤ –æ–±—ä–µ–∫—Ç Date
    const dateObject = new Date(inputDate);

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const year = dateObject.getFullYear();
    const month = String(dateObject.getMonth() + 1).padStart(2, '0'); // –ú–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const day = String(dateObject.getDate()).padStart(2, '0');
    const hours = String(dateObject.getHours()).padStart(2, '0');
    const minutes = String(dateObject.getMinutes()).padStart(2, '0');
    const seconds = String(dateObject.getSeconds()).padStart(2, '0');

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    const isoDate = `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;

    return isoDate;
}

export {
    fetchLoad,
    callBackFormViewObject,
    sendDataForm
};
